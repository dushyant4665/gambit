const { ChessEngine } = require('../dist/ChessEngine')
describe('Server Move Validation Tests', () => {
  let engine
  beforeEach(() => {
    engine = new ChessEngine()
  })
  test('Legal moves are accepted', () => {
    const move1 = engine.makeMove({row: 6, col: 4}, {row: 4, col: 4}) 
    expect(move1).toBeTruthy()
    expect(engine.getActiveColor()).toBe('b') 
    const move2 = engine.makeMove({row: 1, col: 4}, {row: 3, col: 4}) 
    expect(move2).toBeTruthy()
    expect(engine.getActiveColor()).toBe('w') 
  })
  test('Illegal moves are rejected', () => {
    const invalidMove1 = engine.makeMove({row: 1, col: 4}, {row: 3, col: 4}) 
    expect(invalidMove1).toBeFalsy()
    expect(engine.getActiveColor()).toBe('w') 
    const invalidMove2 = engine.makeMove({row: 6, col: 4}, {row: 7, col: 4}) 
    expect(invalidMove2).toBeFalsy()
    expect(engine.getActiveColor()).toBe('w') 
  })
  test('Turn alternation works correctly', () => {
    expect(engine.getActiveColor()).toBe('w') 
    const move1 = engine.makeMove({row: 6, col: 4}, {row: 4, col: 4}) 
    expect(move1).toBeTruthy()
    expect(engine.getActiveColor()).toBe('b') 
    const move2 = engine.makeMove({row: 1, col: 4}, {row: 3, col: 4}) 
    expect(move2).toBeTruthy()
    expect(engine.getActiveColor()).toBe('w') 
    const move3 = engine.makeMove({row: 7, col: 6}, {row: 5, col: 5}) 
    expect(move3).toBeTruthy()
    expect(engine.getActiveColor()).toBe('b') 
  })
  test('Checkmate detection works', () => {
    expect(typeof engine.isCheckmate).toBe('function')
    expect(typeof engine.isStalemate).toBe('function')
    expect(typeof engine.isCheck).toBe('function')
    expect(engine.isCheckmate()).toBe(false)
    expect(engine.isStalemate()).toBe(false)
  })
  test('Game state consistency', () => {
    const initialState = engine.getGameState()
    expect(initialState.activeColor).toBe('w')
    expect(initialState.moveHistory).toHaveLength(0)
    engine.makeMove({row: 6, col: 4}, {row: 4, col: 4}) 
    const afterMoveState = engine.getGameState()
    expect(afterMoveState.activeColor).toBe('b')
    expect(afterMoveState.moveHistory).toHaveLength(1)
    const fen = engine.exportFEN()
    expect(fen).toContain('b') 
    expect(fen).toContain('4P3') 
  })
  test('Move history tracking', () => {
    expect(engine.getGameState().moveHistory).toHaveLength(0)
    engine.makeMove({row: 6, col: 4}, {row: 4, col: 4}) 
    expect(engine.getGameState().moveHistory).toHaveLength(1)
    engine.makeMove({row: 1, col: 4}, {row: 3, col: 4}) 
    expect(engine.getGameState().moveHistory).toHaveLength(2)
    engine.makeMove({row: 7, col: 6}, {row: 5, col: 5}) 
    expect(engine.getGameState().moveHistory).toHaveLength(3)
    const history = engine.getGameState().moveHistory
    expect(history[0].from).toEqual({row: 6, col: 4})
    expect(history[0].to).toEqual({row: 4, col: 4})
  })
})
if (require.main === module) {
  console.log('Running server move validation tests...')
  console.log('Make sure server is built: npm run build')
}
